/* Parser4MIB.java */
/* Generated By:JavaCC: Do not edit this line. Parser4MIB.java */
package com.hellonms.platforms.emp_orange.share.parser.snmp;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

@SuppressWarnings({ "unused", "serial" })
public class Parser4MIB implements Parser4MIBConstants {

  final public MIB_MODULE_DEFINITIONS[] mib() throws ParseException {List<MIB_MODULE_DEFINITIONS> list = new ArrayList<MIB_MODULE_DEFINITIONS>();
        MIB_MODULE_DEFINITIONS item;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case USTRING:
      case WSTRING:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      item = moduleDefinitions();
list.add(item);
    }
{if ("" != null) return list.toArray(new MIB_MODULE_DEFINITIONS[0]);}
    throw new Error("Missing return statement in function");
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DEFINITIONS
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
  final public MIB_MODULE_DEFINITIONS moduleDefinitions() throws ParseException {MIB_MODULE_DEFINITIONS module_definition = new MIB_MODULE_DEFINITIONS();
        String string = "";
        MIB_MODULE_ITEM item = null;
    string = aStringValue();
module_definition.setName(string);
    jj_consume_token(DEFINITIONS);
    jj_consume_token(DEFINE);
    jj_consume_token(BEGIN);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPORTS:
      case EXPORTS:
      case TEXTUAL_CONVENTION:
      case OBJECT_TYPE:
      case TRAP_TYPE:
      case OBJECT_IDENTITY:
      case OBJECT_GROUP:
      case NOTIFICATION_GROUP:
      case MODULE_IDENTITY:
      case MODULE_COMPLIANCE:
      case AGENT_CAPABILITIES:
      case NOTIFICATION_TYPE:
      case USTRING:
      case WSTRING:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      item = moduleItem();
if (item != null) { module_definition.addItem(item); } item = null;
    }
    jj_consume_token(END);
{if ("" != null) return module_definition;}
    throw new Error("Missing return statement in function");
  }

  final public MIB_MODULE_ITEM moduleItem() throws ParseException {MIB_MODULE_ITEM item = null;
    if (jj_2_1(2)) {
      item = imports();
    } else if (jj_2_2(2)) {
      exports();
    } else if (jj_2_3(3)) {
      item = objectIdentifier();
    } else if (jj_2_4(3)) {
      item = textualConvention();
    } else if (jj_2_5(3)) {
      item = syntaxDefine();
    } else if (jj_2_6(3)) {
      macro();
    } else if (jj_2_7(3)) {
      item = macroInstanceValid();
    } else if (jj_2_8(3)) {
      macroInstanceDiscard();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return item;}
    throw new Error("Missing return statement in function");
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMPORTS
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
  final public MIB_IMPORTS imports() throws ParseException {MIB_IMPORTS value = new MIB_IMPORTS();

        String string = "";
    jj_consume_token(IMPORTS);
    label_3:
    while (true) {
      importItem();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        importItem();
      }
      jj_consume_token(FROM);
      string = aStringValue();
value.addFrom(string);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TEXTUAL_CONVENTION:
      case OBJECT_TYPE:
      case TRAP_TYPE:
      case OBJECT_IDENTITY:
      case OBJECT_GROUP:
      case NOTIFICATION_GROUP:
      case MODULE_IDENTITY:
      case MODULE_COMPLIANCE:
      case AGENT_CAPABILITIES:
      case NOTIFICATION_TYPE:
      case BITS:
      case USTRING:
      case WSTRING:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
    }
    jj_consume_token(SEMI_COLON);
{if ("" != null) return value;}
    throw new Error("Missing return statement in function");
  }

  final public void exports() throws ParseException {
    jj_consume_token(EXPORTS);
    importItem();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      importItem();
    }
    jj_consume_token(SEMI_COLON);
  }

  final public void importItem() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TEXTUAL_CONVENTION:{
      jj_consume_token(TEXTUAL_CONVENTION);
      break;
      }
    case OBJECT_TYPE:
    case OBJECT_IDENTITY:
    case MODULE_IDENTITY:{
      macroTypeValid();
      break;
      }
    case TRAP_TYPE:
    case OBJECT_GROUP:
    case NOTIFICATION_GROUP:
    case MODULE_COMPLIANCE:
    case AGENT_CAPABILITIES:
    case NOTIFICATION_TYPE:{
      macroTypeDiscard();
      break;
      }
    case BITS:{
      jj_consume_token(BITS);
      break;
      }
    case USTRING:
    case WSTRING:{
      aStringValue();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OBJECT_IDENTIFIER
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
  final public MIB_NODE objectIdentifier() throws ParseException {MIB_NODE value = new MIB_NODE();
        value.setValid(true);
        value.setMacroType(MIB_NODE.MIB_MACRO_TYPE.OBJECT_IDENTIFIER);

        String string = "";
        MIB_NAME_VALUE[] oid = {};
    string = wStringValue();
value.setName(string);
    jj_consume_token(OBJECT_IDENTIFIER);
    jj_consume_token(DEFINE);
    oid = oidValue();
value.setOid(oid);
{if ("" != null) return value;}
    throw new Error("Missing return statement in function");
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TEXTUAL_CONVENTION
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
  final public MIB_SYNTAX syntaxDefine() throws ParseException {MIB_SYNTAX value = new MIB_SYNTAX();

        String string = "";
        boolean implicit = false;
    string = aStringValue();
    jj_consume_token(DEFINE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case L_BRACKET:{
      jj_consume_token(L_BRACKET);
      read_BRACKET();
      jj_consume_token(R_BRACKET);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IMPLICIT:{
      jj_consume_token(IMPLICIT);
implicit = true;
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    value = syntaxType();
value.setNick_name(string); value.setImplicit(implicit);
{if ("" != null) return value;}
    throw new Error("Missing return statement in function");
  }

  final public MIB_SYNTAX textualConvention() throws ParseException {MIB_SYNTAX value = new MIB_SYNTAX();

        String string = "";
    string = aStringValue();
    jj_consume_token(DEFINE);
    jj_consume_token(TEXTUAL_CONVENTION);
    read_SYNTAX();
    jj_consume_token(SYNTAX);
    value = syntaxType();
value.setNick_name(string);
{if ("" != null) return value;}
    throw new Error("Missing return statement in function");
  }

  final public MIB_SYNTAX syntaxType() throws ParseException {MIB_SYNTAX value = new MIB_SYNTAX();

        String string = "";
        String[] stringArray = {};
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OBJECT_IDENTIFIER:{
      jj_consume_token(OBJECT_IDENTIFIER);
value.setType("OBJECT IDENTIFIER");
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      if (jj_2_9(3)) {
        jj_consume_token(SEQUENCE_OF);
        string = wStringValue();
value.setType("SEQUENCE OF"); value.setArg(string);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CHOICE:{
          jj_consume_token(CHOICE);
          jj_consume_token(L_BRACE);
          stringArray = read_BRACE();
          jj_consume_token(R_BRACE);
value.setType("CHOICE"); value.setBrace(stringArray);
          break;
          }
        case SEQUENCE:{
          jj_consume_token(SEQUENCE);
          jj_consume_token(L_BRACE);
          stringArray = read_BRACE();
          jj_consume_token(R_BRACE);
value.setType("SEQUENCE"); value.setBrace(stringArray);
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          if (jj_2_10(3)) {
            jj_consume_token(OCTET_STRING);
            jj_consume_token(L_PAREN);
            stringArray = read_PAREN();
            jj_consume_token(R_PAREN);
value.setType("OCTET STRING"); value.setParen(stringArray);
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case OCTET_STRING:{
              jj_consume_token(OCTET_STRING);
value.setType("OCTET STRING");
              break;
              }
            default:
              jj_la1[10] = jj_gen;
              if (jj_2_11(2)) {
                jj_consume_token(INTEGER);
                jj_consume_token(L_BRACE);
                stringArray = read_BRACE();
                jj_consume_token(R_BRACE);
value.setType("INTEGER"); value.setBrace(stringArray);
              } else if (jj_2_12(2)) {
                jj_consume_token(INTEGER);
                jj_consume_token(L_PAREN);
                stringArray = read_PAREN();
                jj_consume_token(R_PAREN);
value.setType("INTEGER"); value.setParen(stringArray);
              } else {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case INTEGER:{
                  jj_consume_token(INTEGER);
value.setType("INTEGER");
                  break;
                  }
                default:
                  jj_la1[11] = jj_gen;
                  if (jj_2_13(2)) {
                    jj_consume_token(BITS);
                    jj_consume_token(L_BRACE);
                    stringArray = read_BRACE();
                    jj_consume_token(R_BRACE);
value.setType("BITS"); value.setBrace(stringArray);
                  } else if (jj_2_14(2)) {
                    jj_consume_token(BITS);
                    jj_consume_token(L_PAREN);
                    stringArray = read_PAREN();
                    jj_consume_token(R_PAREN);
value.setType("BITS"); value.setParen(stringArray);
                  } else {
                    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case BITS:{
                      jj_consume_token(BITS);
value.setType("BITS");
                      break;
                      }
                    default:
                      jj_la1[12] = jj_gen;
                      if (jj_2_15(2)) {
                        string = wStringValue();
                        jj_consume_token(L_BRACE);
                        stringArray = read_BRACE();
                        jj_consume_token(R_BRACE);
value.setType(string); value.setBrace(stringArray);
                      } else if (jj_2_16(2)) {
                        string = wStringValue();
                        jj_consume_token(L_PAREN);
                        stringArray = read_PAREN();
                        jj_consume_token(R_PAREN);
value.setType(string); value.setParen(stringArray);
                      } else {
                        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                        case USTRING:
                        case WSTRING:{
                          string = aStringValue();
value.setType(string);
                          break;
                          }
                        default:
                          jj_la1[13] = jj_gen;
                          jj_consume_token(-1);
                          throw new ParseException();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
{if ("" != null) return value;}
    throw new Error("Missing return statement in function");
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MACRO
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void macro() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TEXTUAL_CONVENTION:{
      jj_consume_token(TEXTUAL_CONVENTION);
      break;
      }
    case OBJECT_TYPE:
    case TRAP_TYPE:
    case OBJECT_IDENTITY:
    case OBJECT_GROUP:
    case NOTIFICATION_GROUP:
    case MODULE_IDENTITY:
    case MODULE_COMPLIANCE:
    case AGENT_CAPABILITIES:
    case NOTIFICATION_TYPE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OBJECT_TYPE:
      case OBJECT_IDENTITY:
      case MODULE_IDENTITY:{
        macroTypeValid();
        break;
        }
      case TRAP_TYPE:
      case OBJECT_GROUP:
      case NOTIFICATION_GROUP:
      case MODULE_COMPLIANCE:
      case AGENT_CAPABILITIES:
      case NOTIFICATION_TYPE:{
        macroTypeDiscard();
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(MACRO);
    jj_consume_token(DEFINE);
    jj_consume_token(BEGIN);
    read_END();
    jj_consume_token(END);
  }

  final public MIB_NODE.MIB_MACRO_TYPE macroTypeValid() throws ParseException {MIB_NODE.MIB_MACRO_TYPE value = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MODULE_IDENTITY:{
      jj_consume_token(MODULE_IDENTITY);
value = MIB_NODE.MIB_MACRO_TYPE.MODULE_IDENTITY;
      break;
      }
    case OBJECT_IDENTITY:{
      jj_consume_token(OBJECT_IDENTITY);
value = MIB_NODE.MIB_MACRO_TYPE.OBJECT_IDENTITY;
      break;
      }
    case OBJECT_TYPE:{
      jj_consume_token(OBJECT_TYPE);
value = MIB_NODE.MIB_MACRO_TYPE.OBJECT_TYPE;
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return value;}
    throw new Error("Missing return statement in function");
  }

  final public MIB_NODE.MIB_MACRO_TYPE macroTypeDiscard() throws ParseException {MIB_NODE.MIB_MACRO_TYPE value = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MODULE_COMPLIANCE:{
      jj_consume_token(MODULE_COMPLIANCE);
value = MIB_NODE.MIB_MACRO_TYPE.MODULE_COMPLIANCE;
      break;
      }
    case OBJECT_GROUP:{
      jj_consume_token(OBJECT_GROUP);
value = MIB_NODE.MIB_MACRO_TYPE.OBJECT_GROUP;
      break;
      }
    case TRAP_TYPE:{
      jj_consume_token(TRAP_TYPE);
value = MIB_NODE.MIB_MACRO_TYPE.TRAP_TYPE;
      break;
      }
    case NOTIFICATION_GROUP:{
      jj_consume_token(NOTIFICATION_GROUP);
value = MIB_NODE.MIB_MACRO_TYPE.NOTIFICATION_GROUP;
      break;
      }
    case NOTIFICATION_TYPE:{
      jj_consume_token(NOTIFICATION_TYPE);
value = MIB_NODE.MIB_MACRO_TYPE.NOTIFICATION_TYPE;
      break;
      }
    case AGENT_CAPABILITIES:{
      jj_consume_token(AGENT_CAPABILITIES);
value = MIB_NODE.MIB_MACRO_TYPE.AGENT_CAPABILITIES;
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return value;}
    throw new Error("Missing return statement in function");
  }

  final public MIB_NODE macroInstanceValid() throws ParseException {MIB_NODE value = new MIB_NODE();
        value.setValid(true);

        MIB_NODE.MIB_MACRO_TYPE macroType = null;
        MIB_SYNTAX syntax = null;
        String string = "";
        String string2 = "";
        String[] stringArray = {};
        MIB_NAME_VALUE[] oid = {};
    string = wStringValue();
value.setName(string);
    macroType = macroTypeValid();
value.setMacroType(macroType);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYNTAX:{
        jj_consume_token(SYNTAX);
        syntax = syntaxType();
value.putContents("SYNTAX", syntax);
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        if (jj_2_17(2)) {
          string = uStringValue();
          string2 = wStringValue();
value.putContents(string, string2);
        } else if (jj_2_18(2)) {
          string = uStringValue();
          string2 = cStringValue();
value.putContents(string, string2);
        } else if (jj_2_19(2)) {
          string = uStringValue();
          jj_consume_token(L_BRACE);
          stringArray = read_BRACE();
          jj_consume_token(R_BRACE);
value.putContents(string, stringArray);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYNTAX:
      case USTRING:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_6;
      }
    }
    jj_consume_token(DEFINE);
    oid = oidValue();
value.setOid(oid);
{if ("" != null) return value;}
    throw new Error("Missing return statement in function");
  }

  final public MIB_NODE macroInstanceDiscard() throws ParseException {MIB_NODE value = new MIB_NODE();
        value.setValid(false);

        String string = "";
        MIB_NODE.MIB_MACRO_TYPE macroType = null;
        String[] contents = {};
        MIB_NAME_VALUE[] oid = {};
    string = wStringValue();
value.setName(string);
    macroType = macroTypeDiscard();
value.setMacroType(macroType);
    contents = read_DEFINE();
value.setContents(contents);
    jj_consume_token(DEFINE);
    if (jj_2_20(3)) {
      oid = oidValue();
value.setOid(oid);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:
      case NUM_16:{
        numberValue();
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return value;}
    throw new Error("Missing return statement in function");
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// VALUE
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
  final public MIB_NAME_VALUE[] oidValue() throws ParseException {List<MIB_NAME_VALUE> value_list = new ArrayList<MIB_NAME_VALUE>();
        MIB_NAME_VALUE value = new MIB_NAME_VALUE();
        String string = "";
        BigInteger number = BigInteger.valueOf(0);
    jj_consume_token(L_BRACE);
    label_7:
    while (true) {
      if (jj_2_21(3)) {
        value = enumValue();
value_list.add(value);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case WSTRING:{
          string = wStringValue();
value = new MIB_NAME_VALUE(); value.setName(string); value_list.add(value);
          break;
          }
        case NUMBER:
        case NUM_16:{
          number = numberValue();
value = new MIB_NAME_VALUE(); value.setValue(number); value_list.add(value);
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:
      case NUM_16:
      case WSTRING:{
        ;
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        break label_7;
      }
    }
    jj_consume_token(R_BRACE);
{if ("" != null) return value_list.toArray(new MIB_NAME_VALUE[0]);}
    throw new Error("Missing return statement in function");
  }

  final public MIB_NAME_VALUE enumValue() throws ParseException {MIB_NAME_VALUE value = new MIB_NAME_VALUE();
        String string = "";
        BigInteger number = BigInteger.valueOf(0);
    string = wStringValue();
value.setName(string);
    jj_consume_token(L_PAREN);
    number = numberValue();
value.setValue(number);
    jj_consume_token(R_PAREN);
{if ("" != null) return value;}
    throw new Error("Missing return statement in function");
  }

  final public String aStringValue() throws ParseException {String string = "";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case USTRING:{
      string = uStringValue();
      break;
      }
    case WSTRING:{
      string = wStringValue();
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return string;}
    throw new Error("Missing return statement in function");
  }

  final public String uStringValue() throws ParseException {String string = "";
    token = jj_consume_token(USTRING);
string = token.image;
{if ("" != null) return string;}
    throw new Error("Missing return statement in function");
  }

  final public String wStringValue() throws ParseException {String string = "";
    token = jj_consume_token(WSTRING);
string = token.image;
{if ("" != null) return string;}
    throw new Error("Missing return statement in function");
  }

  final public String cStringValue() throws ParseException {String string = "";
    token = jj_consume_token(CSTRING);
string = token.image;
{if ("" != null) return string;}
    throw new Error("Missing return statement in function");
  }

  final public BigInteger numberValue() throws ParseException {BigInteger number = BigInteger.valueOf(0);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:{
      token = jj_consume_token(NUMBER);
number=new BigInteger(token.image);
      break;
      }
    case NUM_16:{
      token = jj_consume_token(NUM_16);
number=new BigInteger(token.image.replaceAll("'", "").replaceAll("h","").replaceAll("H",""), 16);
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return number;}
    throw new Error("Missing return statement in function");
  }

  String[] read_END() throws ParseException {List<String> string_list = new ArrayList<String>();
        int nesting = 1;
        Token token;
        while (true) {
                token = getToken(1);
                if (token.kind == END) {
                        nesting--;
                }
                if (nesting < 1) {
                        break;
                }
                if (token.kind != IMPLIED) {
                        string_list.add(token.image);
                }
                token = getNextToken();
        }
        return string_list.toArray(new String[0]);
  }

  String[] read_DEFINE() throws ParseException {List<String> string_list = new ArrayList<String>();
        int nesting = 1;
        Token token;
        while (true) {
                token = getToken(1);
                if (token.kind == DEFINE) {
                        nesting--;
                }
                if (nesting < 1) {
                        break;
                }
                if (token.kind != IMPLIED) {
                        string_list.add(token.image);
                }
                token = getNextToken();
        }
        return string_list.toArray(new String[0]);
  }

  String[] read_SYNTAX() throws ParseException {List<String> string_list = new ArrayList<String>();
        int nesting = 1;
        Token token;
        while (true) {
                token = getToken(1);
                if (token.kind == SYNTAX) {
                        nesting--;
                }
                if (nesting < 1) {
                        break;
                }
                if (token.kind != IMPLIED) {
                        string_list.add(token.image);
                }
                token = getNextToken();
        }
        return string_list.toArray(new String[0]);
  }

  String[] read_BRACE() throws ParseException {List<String> string_list = new ArrayList<String>();
        int nesting = 1;
        Token token;
        while (true) {
                token = getToken(1);
                if (token.kind == L_BRACE) {
                        nesting++;
                }
                if (token.kind == R_BRACE) {
                        nesting--;
                }
                if (nesting < 1) {
                        break;
                }
                if (token.kind != IMPLIED) {
                        string_list.add(token.image);
                }
                token = getNextToken();
        }
        return string_list.toArray(new String[0]);
  }

  String[] read_BRACKET() throws ParseException {List<String> string_list = new ArrayList<String>();
        int nesting = 1;
        Token token;
        while (true) {
                token = getToken(1);
                if (token.kind == L_BRACKET) {
                        nesting++;
                }
                if (token.kind == R_BRACKET) {
                        nesting--;
                }
                if (nesting < 1) {
                        break;
                }
                if (token.kind != IMPLIED) {
                        string_list.add(token.image);
                }
                token = getNextToken();
        }
        return string_list.toArray(new String[0]);
  }

  String[] read_PAREN() throws ParseException {List<String> string_list = new ArrayList<String>();
        int nesting = 1;
        Token token;
        while (true) {
                token = getToken(1);
                if (token.kind == L_PAREN) {
                        nesting++;
                }
                if (token.kind == R_PAREN) {
                        nesting--;
                }
                if (nesting < 1) {
                        break;
                }
                if (token.kind != IMPLIED) {
                        string_list.add(token.image);
                }
                token = getNextToken();
        }
        return string_list.toArray(new String[0]);
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_3R_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_9()
 {
    if (jj_scan_token(EXPORTS)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_scan_token(L_BRACE)) return true;
    Token xsp;
    if (jj_3R_31()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_31()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(R_BRACE)) return true;
    return false;
  }

  private boolean jj_3R_8()
 {
    if (jj_scan_token(IMPORTS)) return true;
    Token xsp;
    if (jj_3R_21()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_21()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    if (jj_3R_16()) return true;
    if (jj_3R_30()) return true;
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_3R_17()) return true;
    if (jj_scan_token(L_BRACE)) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_3R_17()) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_3R_17()) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_scan_token(SYNTAX)) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    if (jj_3R_16()) return true;
    if (jj_3R_28()) return true;
    Token xsp;
    if (jj_3R_29()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_scan_token(AGENT_CAPABILITIES)) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_scan_token(NOTIFICATION_TYPE)) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_scan_token(NOTIFICATION_GROUP)) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_scan_token(TRAP_TYPE)) return true;
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_scan_token(OBJECT_GROUP)) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_scan_token(MODULE_COMPLIANCE)) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_scan_token(IMPLICIT)) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_scan_token(OBJECT_TYPE)) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_scan_token(OBJECT_IDENTITY)) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_scan_token(MODULE_IDENTITY)) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_13()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    if (jj_scan_token(MACRO)) return true;
    if (jj_scan_token(DEFINE)) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_3R_16()) return true;
    if (jj_scan_token(L_PAREN)) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_3R_16()) return true;
    if (jj_scan_token(L_BRACE)) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    if (jj_scan_token(BITS)) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_scan_token(BITS)) return true;
    if (jj_scan_token(L_PAREN)) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_scan_token(BITS)) return true;
    if (jj_scan_token(L_BRACE)) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(INTEGER)) return true;
    if (jj_scan_token(L_PAREN)) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(INTEGER)) return true;
    if (jj_scan_token(L_BRACE)) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_scan_token(OCTET_STRING)) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_scan_token(OCTET_STRING)) return true;
    if (jj_scan_token(L_PAREN)) return true;
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_scan_token(SEQUENCE)) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_scan_token(CHOICE)) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_scan_token(SEQUENCE_OF)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_scan_token(OBJECT_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_scan_token(L_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_60()
 {
    if (jj_scan_token(NUM_16)) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    if (jj_3R_23()) return true;
    if (jj_scan_token(DEFINE)) return true;
    if (jj_scan_token(TEXTUAL_CONVENTION)) return true;
    return false;
  }

  private boolean jj_3R_59()
 {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_scan_token(CSTRING)) return true;
    return false;
  }

  private boolean jj_3R_12()
 {
    if (jj_3R_23()) return true;
    if (jj_scan_token(DEFINE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_scan_token(WSTRING)) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_scan_token(USTRING)) return true;
    return false;
  }

  private boolean jj_3R_10()
 {
    if (jj_3R_16()) return true;
    if (jj_scan_token(OBJECT_IDENTIFIER)) return true;
    if (jj_scan_token(DEFINE)) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_3R_16()) return true;
    if (jj_scan_token(L_PAREN)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public Parser4MIBTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[25];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0xfe300000,0x2000,0xfe000000,0x2000,0xfe000000,0x400,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0xfc000000,0xfe000000,0x94000000,0x68000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x18000,0x18007,0x0,0x18807,0x0,0x18807,0x0,0x0,0x20,0x140,0x200,0x400,0x800,0x18000,0x7,0x7,0x0,0x7,0x8,0x8008,0x3000,0x13000,0x13000,0x18000,0x3000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[21];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser4MIB(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser4MIB(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Parser4MIBTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser4MIB(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Parser4MIBTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser4MIB(Parser4MIBTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(Parser4MIBTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[50];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 25; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 50; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 21; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
